%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.16 (Build 20F71) Quartz PS Context)
%%Title: template.eps
%%Creator: ChemDraw(tm) 20.1.0.112
%%CreationDate: 2021-08-11 16:25:31 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 255 76
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2021 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 255 76
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PDZQKO+ArialMT
%!FontType1-1.0: PDZQKO+ArialMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin
/FontName /PDZQKO+ArialMT def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /four put
dup 34 /R put
dup 35 /five put
dup 36 /six put
dup 37 /two put
dup 38 /one put
dup 39 /three put
dup 40 /plus put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1361 1 index div -665 2 index div 4096 3 index div 2060 5 -1 roll div]cvx def
/sfnts [<



592D2C4B5258B00425B0042549B00425B00425496120B0005458212043B0005558B00325B00325B8FFC038B8FFC038591BB04054582043B0005458B00225B8FFC038591B2043B0005458B00325B00325B8FFC038B8FFC0381BB00325B8FFC03859595959212121212D2C462346608A8A462320468A608A61B8FF8062232010238AB902C202C28A70456020B0005058B00161B8FFBA8B1BB0468C59B0106068013A2D2CB1020042B123018851B1400188535A58B910000020885458B202010243604259592D2CB0024354584B53234B515A58381B2121591B21212121592D000000020100000005000500000300070000211121112521112101000400FC2003C0FC400500FB002004C0000001007200ED043A04B6000B0038401F006E0902F908036E050706096E0A040AF905016E3F024F020202190C575A182B4E10F45D4DF43CED3C10E43C3C002FF43CFD3CF431302511213521113311211521110201FE71018FAA018FFE71ED0192A8018FFE71A8FE6E000100DF000002FB05C0000A00AF402003400D11346B047F028F02990804AC04010900060502030905010C0201CA0A00B8FFC0400A21233430000120000100B8FFE0B41010025500B8FFEA40110F0F0255001C0C0C0255000E0D0D025500B8FFF040190F0F065500100C0C065500100D0D0655001A0C05400D0F3405B8FFC0400E212334300501200540050205190BBA013C018500182B4E10E45D712B2B10F62B2B2B2B2B2B2B5D712B3C4DFD3C003F3F17390111393130015D005D2B212311060607353636373302FBB441D35497E22F74047B3E7C1FAE47CA5F000001003C0000040705C0001E01C7B10602435458400911100D18131306550DB8FFF4B4111106550DB8FFEE4009101006550D1E14051EB8FFE84017131306551E1E111106551E1C0E1006551E0C0D0D06551EB802BB400C020A1717201F10110202201F1112392FD4CD1112392FCD002FED2B2B2B2B3FED2B2B2BC43231301BB10202435458400911100D0C121202550DB8FFF440090F1102550D1E14051EB8FFE0400B121302551E140F1102551EB802BBB2020A17B8FFE8B40B0B025517B8FFEC400E0D0D02551717201F10110202201F1112392FD4CD1112392F2B2BCD002FED2B2B3FED2B2BC43231301B40363B053B06BB05BF06BB07C708C91C07490C590C540E6B0C640E7A127A138912BC12E51AE51BF01A0CBF0BB713021B101C101D101E1006BEFFF00007FFE00008FFF00009FFF0401A1E0A10080606CA1C1A141C1C1A081C1A030102081A1C030D1E10B802A4B34F110111B80118B50D1E1405001EB802BB400F01020C0A7317D30000014021233401BB0281002000100138400C11B53F025F026F027F020402BA0224001F018FB18B182B10F65DF4ED10F62B3C10F4ED003F3CFD3C3FEDFD5DE41112173901

2FCD2F003FED3FED12392FFDC410C42B31301B4029120C0D0D06550F0C0D0D06554B1A791D8A1D9613A713C30CD60CDB1B080913180E2A1A03093005300BBAFFE00003FFE04010130A15121313CA0E0F140E13140E0F0DB802A440130E0A1E15400EA00E020E0E0F40150115151C12B802BBB70F0401D340000100B801184020041E1C0D115F106F107F108F1004108007731840212334301801001810180218B8FFF4B70D0D065518902012BC0135000F0195000D0138B20EB501BA01380000FFC0400B212334200040000200901FB80192B18B182B10F65D2BEDF4EDF4ED10F62B5D712BEDF45D3C003FEDFD5DE43FED12392F5D11392F5D10ED10E487082E2B057D10C4001112393130013838383801715D2B2B591337161633323635342623220607271321152103363332001514070623222655BD15996C82B4AD8C578C28A98E02D9FDB74F8491C00108748DF4C8FD0180108A8BC4A29AB24F3F1602F1ACFE765CFEF6D1C791B2E0000002004DFFE7041505C0001D002A014FB10202435458401F0F011F015F0103011B281E400D010D0D14051E1B05221E140D0A1E01002510B8FFF440190D0D0255101E17100F0F025517100C0C0255170C0D0D0255172F2B2B2BCD2F2BCDD4CD10C5003FED3FED12392F5DED10C45D31301B402D6B190144074015441944205A1254206B03640764086A1264207408751C8508861CD608D4161107200D0D065527B8FFE0B40D0D065523B8FFE0400B0D0D065521200D0D065507B8FFE0B42720232021B8FFE04011281E400D500D020D0D141B01D35F000100B802684009051E1B05221E140D01B80138401200B525731040212334301001001010100210B8FFF0B70C0C065510902C0ABA0138001E013940163F175F176F177F170417160C0C065517160D0D065517B80224B32BC78B182B10F62B2B5DEDED10F62B5D712BEDF4ED003FED3FEDFD5DE41112392F5DED313001383838382B2B2B2B015D005D590107262726232207060607363633321215140606232200111037363332160114161633323635342623220603FBB3182C496B564155620241BC67B4FD77D084E1FEE49D89E8ADDDFD374F8E4E72A4A27B7AAA04530E6A304D303EEEDC6360FEF7D28AED7E014B017C01A9C1A8C2FCDD5DAA59B89E98AFAF000200A1000005AD05BA0018002201FC4021120B0E0112361C5A1F66086D1F0409100D0D065508100D0D065507100D0D065524B8FFC0B40C0C02550DB8FFF4B40C0C02550CB8FFF4B40C0C02550BB8FFF4B40C0C025512B8FFE2B3121A3412B8FFF0B322273411B8FFE2B31D273410B8FFE2B31D27340FB8FFE2B31D273412B8FFD8B31D263411B8FFE2B3121A3410B8FFE2B3121A340FB8FFE24049121A34250E4A1C4A20530B5C1C6D1C7209780E790F850A880F970DA90FB80FE80EE7



89766818B080622020B134504565234520B003266062636820B003266165B050236544B034234420B147374565234520B003266062636820B003266165B037236544B0472344B10037455458B137406544B24740474523614459004B5342014B5058B108004259435C58B108004259B3020B0A124358601B2159421610703EB0124358B93B21187E1BBA040001A8000B2B59B00C2342B00D2342B0124358B92D412D411BBA04000400000B2B59B00E2342B00F2342B0124358B9187E3B211BBA01A80400000B2B59B0102342B0112342002B7475737500184569444569444569447373737374757374752B2B2B2B74752B2B2B2B2B737373737373737373737373737373737373737373737373732B2B2B45B0406144737400004BB02A534BB03F515A58B1070745B040604459004BB03A534BB03F515A58B10B0B45B8FFC0604459004BB02E534BB03A515A58B1030345B040604459004BB02E534BB03C515A58B1090945B8FFC06044592B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B752B2B2B2B2B2B2B435C58B9008002BBB301401E017400735903B01E4B5402B0124B545AB012435C5A58BA009F02220001007359002B7473012B01732B2B2B2B2B2B2B2B737373732B2B2B2B2B002B2B2B2B2B2B004569447345694473456944737475456944734569444569444569447374456944456944732B2B2B2B2B732B002B732B74752B2B2B2B2B2B2B2B2B2B2B2B2B2B737475732B7374757374752B2B2B742B2B0000
00>] def
/CharStrings 9 dict dup begin
/.notdef 0 def
/plus 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/six 7 def
/R 8 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1361 -665 4096 2060} readonly def
/UniqueID 4167158 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28A34314447AEE989C9D5F058EB91AA64CFFCFD907A0DD23543824B3AC43E4C2E5F8AB0426842D17969BF52EE1626FFF2899FCDE347B9C171E4DDE11BA84782542D79640A277C950A05BFF3B9F8C0219E42A771E09A15CA1A59BE9C86A1183F591346BBE8FC7E704D0A8A5607B4E8CE0EB2EBC52C12E1962F464A8C54D5B5D9B69C29811BE57B1327C2148B3CBF6CA998C5AB0542183840417FFDFB64CF8762120A1B871C5D2C91C40F996912289491F5B44D7C4E9661BBE3C77A8284DD4547ADF59479C783167E016DACFA8AB4D421E0DB4A4C5B4681DCCD23E5823C251CCEC46E55622C0D7A68409E5E18007D951DBB64BB5A431646F45ECE2B655031ED9ED37D9AA96EB906F9E754AA4DF1CA501767932EDB3B60507D2F869FBAF5AC13BA0A7882A17C898B55F902A730C0ECA999DDB1EBCFFF508C922DAA116A2081C448743DB83A202CB50DE38ED93C483B15A3877ADA55B8305278A26D8F6D8339E2500FE707BF3FB707829A737C4FCFFB34DD665FA44EACFE8FB9273E4335BE00C209123B9E898257B282E4ED36312A9227497858E1ACD80976AF61C0482720935C48491C1FA26DDD03572E08742CCB7C57195B29B8A4C78BF37C7E786A03F2113F121626CB9174F27679371FC31D03CE00CA3C878D593982334E6A749EABD9F930D2E6499D3289CE37F6FD97B831007B117D1DF84C0E894ECCE8DC9A7AA221DF2A6AF919EC89FF84186E7A2BD471A87B496CAD08A7E1E92C5BBD9A87004D9455D3EF2FB1CAF31A
2B23E2D8A4A2998F333C3D98BFBC469E2BC94296EB75D52CF18734DBECAA256C64C02AADBBCD511E94287C065D87F0F82F1F883B307D3514432DB2A011AC28CAC81E33019D4BC74B9CC1BB29447E3B07474786FCE348ADB51C3E30001B907F8499BA60EB7E5AFFE788675533BC704A7169DEE70EEECF5ECD32B571833AEFD11EC2674D6ABF57950DD11A07D7D8ED867E8CDBA3988FFA1A3E61D376968615954D3A81BDB6C58DD1A1C58CE808A96A519C502B75505808DC3E9DAF40C62E1E513A9DB18058B48F118132F311DF188FC1F11AE38738983F5B6D482291362245EB5AAAF1BD2F6AB555BDBCBC51EF2BE0F00F89941B8462D0324A63B567B49D07D9D7E42AE892697F37BE912FB5D626E7366F610BA2E558854B732B0C83F06864610BCF1960924F919745B8788C0CCE7790E0BE52D41C67FB58007DF5F6F96BE6BB3E71A685D9E9632E202C7D8A5EB7B194E1686C4B760BFD289DA0713900A25936D22BD597601A93FE8D373EF8C486298261ABCE3E2D25F61818E9BE5CC4AE58D3CC358FEA9364127CE47641F8928FA7DFF5BB3262AA57AC644FB505A3D97DA480963979527603C5AD4DA0D34E907E2003E265AEC45E14CB9F3D9AED2708EA992D5C42ADFF144CEED5725FB913D7E2BC5A1F817923B2F89097FF6D34A43EF784C87F7CE7EA129E1CB79216E5E92F61407113AE725E14D878006E4B45C60244C0B3D27BF83DB8028A2F0FFA647BAA7D6EADAD562F217C0D0555894ADBDE6FA085FA36AAE4E70DB885C3E0026891004C30C862B84141EA397BE60679FD0561F127CBB412333F98414BBC2EE621AE3C9DB81DB24F518D33BA8E2FFE61F7FCA14FEA37228FB7B5E25AE6CCB8FEC3ED260C38B48C207AD502A432A770D73597A4D312FE0318A411FCD578CD7D54BDACFFD7A7190BE6E882828B28F4BF423F05BC6301B0263469D02054887B314776B71EB3CBBCD1A9972C519DF578E062011E4EE71B312BE32623FC467E5CFC889A8B9B97A230595380168A2B3E995A161BDD3F8C0535F72D11E3E1A9BF3D89AE01D4AC472AC8A3E418B8D68497921FF64CC152CB89769D090A8C6AA37D6B2AC8B3AE4C7163F18A9B4973F3A599A00114356E4B4E1E1367E9C711D021EEC4AF640BE0FBEE3B03654E5B9D54C9862D044B34A723B848FDCE45413E20F65C96FE89A88BB2AF56C77632F280A415B1554B6187FEA82244E9F6CC31041E5C27A703D531713891EE02840E410AC741B9068BFF68E7564F06C19EC0C39F7B51E2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/PDZQKO+ArialMT cguidfix
/F1.1/PDZQKO+ArialMT renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 255 76 rc
-0.050000001 76 m
255.05 76 l
255.05 -0.050000001 l
-0.050000001 -0.050000001 l
h
f
1 0.50196081 0 sc
1 0 0 -1 227.91531 52.800583 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.3686523 m
(!)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.9501953 m
(")s
0 0.50196081 0 sc
1 0 0 -1 227.91531 30.376461 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.2954102 m
(#)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.8769531 m
(")s
0 0 1 sc
1 0 0 -1 215.54008 11.767859 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
($)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
1 0 1 sc
1 0 0 -1 241.39095 26.69286 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
(%)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
0 1 1 sc
1 0 0 -1 241.39095 56.542858 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
(&)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
1 0 0 sc
1 0 0 -1 215.54008 71.467857 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
(')s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
0 0 0 sc
CM
236.1973 32.364254 m
235.1973 32.364254 l
235.1973 41.865131 l
236.1973 41.865131 l
236.1973 32.364254 l
h
f
233.51079 32.364254 m
232.51079 32.364254 l
232.51079 41.865131 l
233.51079 41.865131 l
233.51079 32.364254 l
h
f
226.57016 11.248883 m
225.73683 11.801657 l
231.24863 20.110954 l
232.08197 19.55818 l
226.57016 11.248883 l
h
f
241.97771 18.604965 m
242.47771 17.738939 l
228.05098 9.4096622 l
227.55098 10.275687 l
241.97771 18.604965 l
h
f
248.67293 45.585438 m
249.67293 45.585438 l
249.67293 28.635437 l
248.67293 28.635437 l
248.67293 45.585438 l
h
f
245.09093 45.585438 m
246.09093 45.585438 l
246.09093 28.635437 l
245.09093 28.635437 l
245.09093 45.585438 l
h
f
229.36331 62.891514 m
229.86331 63.757538 l
241.04216 57.303432 l
240.54216 56.437405 l
229.36331 62.891514 l
h
f
231.32112 55.802322 m
230.48779 55.24955 l
227.14639 60.286873 l
227.97974 60.839645 l
231.32112 55.802322 l
h
f
1 0.50196081 0 sc
1 0 0 -1 2.7438915 56.808434 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.3686523 m
(!)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.9501953 m
(")s
0 0.50196081 0 sc
1 0 0 -1 2.7438915 26.771811 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.2954102 m
(#)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.8769531 m
(")s
0 0 1 sc
1 0 0 -1 28.724649 11.819418 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
($)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
1 0 1 sc
1 0 0 -1 102.48512 26.819418 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
(%)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
0 1 1 sc
1 0 0 -1 102.48512 56.81942 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
(&)s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
1 0 0 sc
1 0 0 -1 28.724649 71.81942 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.390625 m
(')s
/F1.1[ 10 0 0 -10 0 0]sf
4.1711426 8.972168 m
(")s
0 0 0 sc
CM
11.025874 28.759604 m
10.025874 28.759604 l
10.025874 45.872982 l
11.025874 45.872982 l
11.025874 28.759604 l
h
f
14.625874 28.759604 m
13.625874 28.759604 l
13.625874 31.204372 l
14.625874 31.204372 l
14.625874 28.759604 l
h
f
14.625874 33.649139 m
13.625874 33.649139 l
13.625874 36.09391 l
14.625874 36.09391 l
14.625874 33.649139 l
h
f
14.625874 38.538677 m
13.625874 38.538677 l
13.625874 40.983444 l
14.625874 40.983444 l
14.625874 38.538677 l
h
f
14.625874 43.428215 m
13.625874 43.428215 l
13.625874 45.872982 l
14.625874 45.872982 l
14.625874 43.428215 l
h
f
28.06415 12.759954 m
27.56415 11.893929 l
16.543755 18.256559 l
17.043755 19.122583 l
28.06415 12.759954 l
h
f
29.864151 15.877645 m
29.364151 15.011621 l
27.16007 16.284145 l
27.66007 17.150171 l
29.864151 15.877645 l
h
f
25.455992 18.422697 m
24.955992 17.556671 l
22.751913 18.829199 l
23.251913 19.695223 l
25.455992 18.422697 l
h
f
21.047832 20.967749 m
20.547832 20.101725 l
18.343754 21.37425 l
18.843754 22.240274 l
21.047832 20.967749 l
h
f
106.16711 45.811996 m
107.16711 45.811996 l
107.16711 28.711996 l
106.16711 28.711996 l
106.16711 45.811996 l
h
f
109.76711 45.811996 m
110.76711 45.811996 l
110.76711 28.711996 l
109.76711 28.711996 l
109.76711 45.811996 l
h
f
113.3671 45.811996 m
114.3671 45.811996 l
114.3671 28.711996 l
113.3671 28.711996 l
113.3671 45.811996 l
h
f
15.291115 54.482197 m
14.791115 55.348225 l
29.248676 63.695301 l
29.748676 62.829277 l
15.291115 54.482197 l
h
f
17.091114 51.364506 m
16.591114 52.230534 l
18.656481 53.42297 l
19.156481 52.556946 l
17.091114 51.364506 l
h
f
21.221846 53.749386 m
20.721846 54.61541 l
22.787212 55.80785 l
23.287212 54.941826 l
21.221846 53.749386 l
h
f
25.352577 56.134266 m
24.852577 57.00029 l
26.917944 58.19273 l
27.417944 57.326706 l
25.352577 56.134266 l
h
f
29.483311 58.519146 m
28.983311 59.38517 l
31.048676 60.57761 l
31.548676 59.711586 l
29.483311 58.519146 l
h
f
165.78067 40.125 m
130.48067 40.125 l
130.48067 41.125 l
165.78067 41.125 l
h
f
137.68066 38.125 m
172.98067 38.125 l
172.98067 37.125 l
137.68066 37.125 l
h
f
174.48067 40.125 m
174.48067 40.125 165.73067 40.125 165.73067 40.125 c
165.73067 41.762501 164.48067 43.224998 164.48067 43.224998 c
164.48067 43.224998 174.48067 40.125 174.48067 40.125 c
174.48067 40.125 174.48067 40.125 174.48067 40.125 c
h
f
128.98067 38.125 m
128.98067 38.125 138.98067 35.025002 138.98067 35.025002 c
138.98067 35.025002 137.73067 37.487499 137.73067 38.125 c
137.73067 38.125 128.98067 38.125 128.98067 38.125 c
128.98067 38.125 128.98067 38.125 128.98067 38.125 c
h
f
1 0 0 -1 80.438553 46.138283 cm
/F1.1[ 12 0 0 -12 0 0]sf
0 10.863281 m
(\()s
CM
62.316986 21.690027 m
63.316986 21.112677 l
41.673172 8.6166172 l
41.173172 9.4826422 l
62.316986 21.690027 l
h
f
58.966984 23.912827 m
59.466984 23.046801 l
57.289894 21.789856 l
56.789894 22.655882 l
58.966984 23.912827 l
h
f
54.612804 21.398939 m
55.112804 20.532913 l
52.935715 19.27597 l
52.435715 20.141994 l
54.612804 21.398939 l
h
f
50.258625 18.885052 m
50.758625 18.019026 l
48.581535 16.762083 l
48.081535 17.628107 l
50.258625 18.885052 l
h
f
45.904446 16.371164 m
46.404446 15.505139 l
44.227352 14.248196 l
43.727352 15.114221 l
45.904446 16.371164 l
h
f
41.550262 13.857277 m
42.050262 12.991252 l
39.873173 11.734308 l
39.373173 12.600333 l
41.550262 13.857277 l
h
f
62.316986 51.112679 m
63.316986 51.690025 l
63.316986 21.112677 l
62.316986 21.690027 l
62.316986 51.112679 l
h
f
58.716984 49.371067 m
59.716984 49.371067 l
59.716984 46.502831 l
58.716984 46.502831 l
58.716984 49.371067 l
h
f
58.716984 43.634598 m
59.716984 43.634598 l
59.716984 40.766361 l
58.716984 40.766361 l
58.716984 43.634598 l
h
f
58.716984 37.898125 m
59.716984 37.898125 l
59.716984 35.029892 l
58.716984 35.029892 l
58.716984 37.898125 l
h
f
58.716984 32.161655 m
59.716984 32.161655 l
59.716984 29.293423 l
58.716984 29.293423 l
58.716984 32.161655 l
h
f
58.716984 26.425186 m
59.716984 26.425186 l
59.716984 23.556952 l
58.716984 23.556952 l
58.716984 26.425186 l
h
f
42.237537 62.705551 m
42.737537 63.571575 l
63.316986 51.690025 l
62.316986 51.112679 l
42.237537 62.705551 l
h
f
40.437538 59.58786 m
40.937538 60.453884 l
43.584602 58.925602 l
43.084602 58.059578 l
40.437538 59.58786 l
h
f
45.731663 56.531292 m
46.231663 57.39732 l
48.878727 55.869038 l
48.378727 55.00301 l
45.731663 56.531292 l
h
f
51.025791 53.474728 m
51.525791 54.340752 l
54.172855 52.812469 l
53.672855 51.946445 l
51.025791 53.474728 l
h
f
56.31992 50.418159 m
56.81992 51.284187 l
59.466984 49.755905 l
58.966984 48.889877 l
56.31992 50.418159 l
h
f
197.97122 51.73233 m
196.97122 52.331219 l
217.67445 63.416527 l
218.14648 62.534946 l
197.97122 51.73233 l
h
f
197.97122 22.463728 m
196.97122 21.899824 l
196.97122 52.331219 l
197.97122 51.73233 l
197.97122 22.463728 l
h
f
201.55322 24.249844 m
200.55322 24.249844 l
200.55322 49.963707 l
201.55322 49.963707 l
201.55322 24.249844 l
h
f
214.68831 12.35448 m
214.17084 11.498776 l
196.97122 21.899824 l
197.97122 22.463728 l
214.68831 12.35448 l
h
f
ep
end
%%Trailer
%%EOF
